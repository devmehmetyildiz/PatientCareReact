{"version":3,"sources":["app/Components/Common/ToggleColumns.js","app/Pages/Stations/Delete.js","app/Pages/Stations/index.js"],"names":["Component","Delete","DeleteHandle","a","props","DeleteStation","Stations","selected_station","GetAllStations","CloseDeleteModal","Modal","this","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","name","Footer","Button","onClick","mapDispatchToProps","connect","state","withRouter","CustomToggleList","columns","onColumnToggle","toggles","className","map","column","toggle","dataField","index","Form","Check","type","key","inline","label","text","checked","aria-checked","onChange","handleonaddnew","e","history","push","handleDeleteCase","row","GetSelectedStation","OpenDeleteModal","getData","sort","hidden","formatter","events","columnIndex","rowIndex","columnvisiblebar","defaultSorted","order","modalShow","SearchBar","Search","Data","list","Columns","show","isModalOpen","onHide","isLoading","Spinner","style","minWidth","height","keyField","bootstrap4","data","search","columnToggle","columnToggleProps","searchProps","pagination","paginationFactory","baseProps","wrapperClasses"],"mappings":"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","file":"static/js/19.697043b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Modal, Button, Row, Col, Form } from 'react-bootstrap';\r\n\r\n\r\nexport class ToggleColumns extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n      \r\n\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Modal\r\n                    {...this.props}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                >\r\n                    <Modal.Body>\r\n                        <Row>\r\n                            <Col sm={6}>\r\n                                <Form onSubmit={this.handleSubmit}>\r\n                                    <Form.Group controlId=\"parametername\">\r\n                                        <Form.Label>Case Name</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"parametername\" required\r\n                                            placeholder=\"parametername\" />\r\n                                    </Form.Group>\r\n\r\n\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer >\r\n                        <Button variant=\"primary\" type=\"submit\">  Add Case </Button>\r\n\r\n                        <Button variant=\"danger\" onClick={this.props.onHide}>Close</Button>\r\n                    </Modal.Footer>\r\n\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Button, Modal, Form, Col, Row, Container } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { GetAllStations, CloseDeleteModal, DeleteStation } from '../../Redux/actions/StationAction'\r\n\r\nexport class Delete extends Component {\r\n\r\n    DeleteHandle = async () => {\r\n       await this.props.DeleteStation(this.props.Stations.selected_station)\r\n       await this.props.GetAllStations()\r\n       await this.props.CloseDeleteModal()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                {...this.props}\r\n                size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        İsyasyon Silme\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        {this.props.Stations.selected_station.name} istasyonunu silmek istediğinize Eminmisiniz?\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => { this.props.CloseDeleteModal() }}>Vazgeç</Button>\r\n                    <Button onClick={() => { this.DeleteHandle() }}>Sil</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    Stations: state.Stations,\r\n})\r\n\r\nconst mapDispatchToProps = { GetAllStations,  CloseDeleteModal, DeleteStation }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Delete))\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ToggleColumns from \"../../Components/Common/ToggleColumns\"\r\nimport { GetAllStations, GetSelectedStation, OpenDeleteModal, CloseDeleteModal } from '../../Redux/actions/StationAction'\r\nimport Spinner from '../../shared/Spinner'\r\nimport DeleteCaseModal from \"./Delete\"\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nexport class Stations extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        const modalShow = false;\r\n        const columnvisiblebar = false\r\n        const defaultSorted = [{\r\n            dataField: 'Id',\r\n            order: 'asc'\r\n        }]\r\n        const columns = [\r\n            {\r\n                dataField: 'id',\r\n                text: 'id',\r\n                sort: true,\r\n                type: 'number',\r\n                hidden: true\r\n            },  {\r\n                dataField: 'name',\r\n                text: 'İsyasyon Adı',\r\n                sort: true\r\n            }, {\r\n                dataField: 'normalizedName',\r\n                text: 'Normalize İsim',\r\n                sort: true,\r\n                hidden: true\r\n            }, {\r\n                dataField: 'concurrencyStamp',\r\n                text: 'Unik ID',\r\n                sort: true\r\n            }, {\r\n                dataField: 'createdUser',\r\n                text: 'Oluşturan Kullanıcı',\r\n                sort: true,\r\n                hidden: true\r\n            }, {\r\n                dataField: 'updatedUser',\r\n                text: 'Güncelleyen Kullanıcı',\r\n                sort: true,\r\n                hidden: true\r\n            }, {\r\n                dataField: 'deleteUser',\r\n                text: 'Silen Kullanıcı',\r\n                sort: true,\r\n                hidden: true\r\n            },\r\n            , {\r\n                dataField: 'createTime',\r\n                text: 'Oluşturma Tarihi',\r\n                sort: true,\r\n                type: 'date',\r\n                hidden: true\r\n            },\r\n            , {\r\n                dataField: 'updateTime',\r\n                text: 'Güncelleme Tarihi',\r\n                sort: true,\r\n                type: 'date',\r\n                hidden: true\r\n            },\r\n            , {\r\n                dataField: 'deletetime',\r\n                text: 'Silme Tarihi',\r\n                sort: true,\r\n                type: 'date',\r\n                hidden: true\r\n            },\r\n            , {\r\n                dataField: 'isActive',\r\n                text: 'Aktiflik Durumu',\r\n                sort: true,\r\n                type: 'bool'\r\n            }, {\r\n                dataField: 'update',\r\n                text: 'Güncelle',\r\n                sort: true,\r\n                formatter: () => {\r\n                    return (\r\n                        <div>\r\n                            <button className=\"btn btn-dark\">\r\n                                <i className=\"mdi mdi-tooltip-edit text-primary\"></i>Güncelle\r\n                            </button>\r\n                        </div>\r\n                    );\r\n                },\r\n                events: {\r\n                    onClick: (e, column, columnIndex, row, rowIndex) => {\r\n                        this.props.history.push('/Stations/' + row.id)\r\n                    }\r\n                }\r\n            }\r\n            , {\r\n                dataField: 'delete',\r\n                text: 'Sil',\r\n                sort: true,\r\n                formatter: () => {\r\n                    return (\r\n                        <div>\r\n                            <button className=\"btn btn-dark\">\r\n                                <i className=\"mdi mdi-trash-can text-primary\"></i>Sil\r\n                            </button>\r\n                        </div>\r\n                    );\r\n                },\r\n                events: {\r\n                    onClick: (e, column, columnIndex, row, rowIndex) => {\r\n                        this.handleDeleteCase(e, row)\r\n                    }\r\n                }\r\n            }\r\n\r\n        ];\r\n        this.state = { columnvisiblebar, defaultSorted, columns, modalShow };\r\n\r\n    }\r\n\r\n\r\n\r\n    CustomToggleList = ({\r\n        columns,\r\n        onColumnToggle,\r\n        toggles\r\n    }) => (\r\n        <div className=\"text-center\">\r\n            {columns\r\n                .map(column => ({\r\n                    ...column,\r\n                    toggle: toggles[column.dataField]\r\n                }))\r\n                .map((column, index) => (\r\n                    <Form.Check\r\n                        type=\"checkbox\"\r\n                        key={column.dataField}\r\n                        inline\r\n                        label={column.text}\r\n                        id={column.dataField}\r\n                        //aria-pressed={(column.toggle) ? \"true\" : \"false\"}\r\n                        checked={column.toggle}\r\n                        aria-checked={column.toggle ? \"true\" : \"false\"}\r\n                        onChange={() => onColumnToggle(column.dataField)}\r\n                    //onClick={() => onColumnToggle(column.dataField)}\r\n                    />\r\n                ))}\r\n        </div>\r\n    );\r\n\r\n    handleonaddnew = (e) => {\r\n        this.props.history.push(\"/Stations/Create\")\r\n    }\r\n\r\n    handleDeleteCase = (e, row) => {\r\n        this.props.GetSelectedStation(row.id)\r\n        this.props.OpenDeleteModal()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    getData = async () => {\r\n        await this.props.GetAllStations();\r\n    };\r\n\r\n\r\n    render() {\r\n        const { SearchBar } = Search;\r\n        const Data = this.props.Stations.list\r\n        const Columns = this.state.columns\r\n        return (\r\n            <div>\r\n                <DeleteCaseModal\r\n                    show={this.props.Stations.isModalOpen}\r\n                    onHide={() => this.props.CloseDeleteModal()}\r\n                />\r\n                {this.props.Stations.isLoading ? <Spinner /> :\r\n                    <div className=\"row datatable\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className='row'>\r\n                                        <div className='col-6 d-flex justify-content-start'>\r\n                                            <h4 className=\"card-title\">İsyasyonlar</h4>\r\n                                        </div>\r\n                                        <div className='col-6 d-flex justify-content-end'>\r\n                                           {/*  <button style={{ minWidth: '30px', height: '30px' }} onClick={() => { this.setState({ columnvisiblebar: !this.state.columnvisiblebar }) }}>Toggle</button> */}\r\n                                            <button style={{ minWidth: '120px', height: '30px' }} onClick={this.handleonaddnew} className=\"btn btn-primary mr-2\">Yeni İstasyon</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-12\">\r\n                                            <ToolkitProvider\r\n                                                keyField=\"id\"\r\n                                                bootstrap4\r\n                                                data={Data}\r\n                                                columns={Columns}\r\n                                                search\r\n                                                columnToggle\r\n                                            >\r\n                                                {\r\n                                                    props => (\r\n                                                        <div>\r\n                                                            {this.state.columnvisiblebar ?\r\n                                                                <div>\r\n                                                                    <this.CustomToggleList {...props.columnToggleProps} />\r\n                                                                    <hr />\r\n                                                                </div>\r\n                                                                : <></>}\r\n                                                            <div className=\"d-flex align-items-center\">\r\n                                                                <p className=\"mb-2 mr-2\">Arama Yap:</p>\r\n                                                                <SearchBar {...props.searchProps} />\r\n                                                            </div>\r\n                                                            <BootstrapTable\r\n                                                                defaultSorted={this.state.defaultSorted}\r\n                                                                pagination={paginationFactory()}\r\n                                                                {...props.baseProps}\r\n                                                                wrapperClasses=\"table-responsive\"\r\n                                                            />\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            </ToolkitProvider>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    Stations: state.Stations,\r\n})\r\n\r\nconst mapDispatchToProps = { GetAllStations, GetSelectedStation, OpenDeleteModal, CloseDeleteModal }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Stations))\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}