{"version":3,"sources":["app/Components/Common/Forminput.js","app/Pages/Departments/Edit.js"],"names":["Forminput","props","rowclass","rowvalue","itemrowspan","undefined","state","className","this","style","fontSize","itemname","Group","Control","id","itemid","value","itemvalue","type","itemtype","placeholder","itemplaceholder","onChange","itemchange","Component","Edit","GetData","a","GetSelectedDepartment","match","params","DepartmentId","GetAllStations","prevData","Departments","selected_department","stations","map","item","index","concurrencyStamp","label","name","setState","currentitem","selected_stations","handlesubmit","e","preventDefault","postData","goBack","history","push","handlechange","newdata","target","handleselect","Stations","list","find","station","console","log","UpdateDepartment","Id","Name","NormalizedName","ConcurrencyStamp","CreatedUser","UpdatedUser","DeleteUser","CreateTime","UpdateTime","DeleteTime","IsActive","prevselected_station","isLoading","onSubmit","isMulti","options","onClick","minWidth","mapDispatchToProps","connect","withRouter"],"mappings":"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","file":"static/js/16.3cb26343.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nexport default class Forminput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        let rowclass = \"\"\r\n        let rowvalue = this.props.itemrowspan\r\n        if (rowvalue === undefined) {\r\n            rowvalue = \"1\"\r\n        }\r\n        switch (rowvalue) {\r\n            case \"1\":\r\n                rowclass = `pr-5 col-6`\r\n                break;\r\n            case \"2\":\r\n                rowclass = `pr-5 col-12`\r\n                break;\r\n            case \"3\":\r\n                rowclass = `pr-5 col-4`\r\n                break;\r\n            case \"4\":\r\n                rowclass = `pr-5 col-3`\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        this.state = { rowclass }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={this.state.rowclass}>\r\n                <div className='row'>\r\n                    <label style={{ fontSize: \"12px\" }} className=\"col-form-label\">{this.props.itemname}</label>\r\n                </div>\r\n                <Form.Group className=\"row\" >\r\n                    <Form.Control\r\n                        id={this.props.itemid}\r\n                        value={this.props.itemvalue}\r\n                        type={this.props.itemtype}\r\n                        placeholder={this.props.itemplaceholder}\r\n                        onChange={this.props.itemchange} />\r\n                </Form.Group>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport cogoToast from 'cogo-toast';\r\nimport InputItem from '../../Components/Common/Forminput'\r\nimport \"../../../assets/styles/Pages/Create.scss\"\r\nimport { UpdateDepartment, GetSelectedDepartment } from \"../../Redux/actions/DepartmentAction\"\r\nimport { GetAllStations } from \"../../Redux/actions/StationAction\"\r\nimport Spinner from '../../shared/Spinner'\r\nimport Select from 'react-select';\r\n\r\nexport class Edit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        const currentitem = {\r\n            Id: 0,\r\n            Name: \"\",\r\n            NormalizedName: null,\r\n            ConcurrencyStamp: null,\r\n            CreatedUser: \"\",\r\n            UpdatedUser: null,\r\n            DeleteUser: null,\r\n            CreateTime: null,\r\n            UpdateTime: null,\r\n            DeleteTime: null,\r\n            IsActive: true,\r\n            stations: []\r\n        }\r\n        const pagestatus = false\r\n        const selected_stations = []\r\n        const prevselected_station = []\r\n        this.state = { currentitem, selected_stations, prevselected_station };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.GetData()\r\n    }\r\n\r\n    GetData = async () => {\r\n        await this.props.GetSelectedDepartment(this.props.match.params.DepartmentId);\r\n        await this.props.GetAllStations();\r\n        const prevData = this.props.Departments.selected_department.stations.map((item, index) => {\r\n            return { value: item.concurrencyStamp, label: item.name }\r\n        })\r\n        this.setState({ currentitem: this.props.Departments.selected_department, selected_stations: prevData })\r\n    }\r\n\r\n    handlesubmit = (e) => {\r\n        e.preventDefault()\r\n        this.postData();\r\n    }\r\n\r\n    goBack = (e) => {\r\n        e.preventDefault()\r\n        this.props.history.push(\"/Departments\")\r\n    }\r\n\r\n    handlechange = (e) => {\r\n        const newdata = { ...this.state.currentitem }\r\n        newdata[e.target.id] = e.target.value\r\n        this.setState({ currentitem: newdata }, () => {\r\n        })\r\n    }\r\n\r\n    handleselect = (e) => {\r\n        const newdata = { ...this.state.currentitem }\r\n        if (e === null) {\r\n            newdata.stations = []\r\n        }\r\n        else {\r\n            newdata.stations = e.map((item) => {\r\n                return this.props.Stations.list.find(station => station.concurrencyStamp === item.value);\r\n            })\r\n        }\r\n        this.setState({ currentitem: newdata, selected_stations: e }, () => {\r\n            console.log(this.state.currentitem)\r\n        })\r\n    }\r\n\r\n    postData = async () => {\r\n        this.props.UpdateDepartment(this.state.currentitem, this.props.history)\r\n    };\r\n\r\n    render() {\r\n        const { isLoading } = this.props.Departments\r\n        const { selected_stations } = this.state\r\n        const list = this.props.Stations.list.map((item, index) => {\r\n            return { value: item.concurrencyStamp, label: item.name }\r\n        })\r\n        return (\r\n            <>\r\n                {isLoading ? <Spinner /> :\r\n                    <div className='Page'>\r\n                        <div className=\"col-12 grid-margin\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <h4 className=\"card-title\">Departmanlar > Güncelle</h4>\r\n                                    <form className=\"form-sample\" onSubmit={this.handlesubmit}>\r\n                                        <div className=\"row\">\r\n                                            <InputItem\r\n                                                itemrowspan=\"2\"\r\n                                                itemname=\"Departman Adı\"\r\n                                                itemid=\"name\"\r\n                                                itemvalue={this.state.currentitem.name}\r\n                                                itemtype=\"text\"\r\n                                                itemplaceholder=\"Departman Adı\"\r\n                                                itemchange={this.handlechange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='row'>\r\n                                            <div className='col-12 pr-5 mb-3'>\r\n                                                <Select\r\n                                                    value={selected_stations}\r\n                                                    onChange={this.handleselect}\r\n                                                    isMulti={true}\r\n                                                    options={list}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='row d-flex pr-5 justify-content-end align-items-right'>\r\n                                            <button onClick={this.goBack} style={{ minWidth: '150px' }} className=\"btn btn-dark mr-2\">Geri Dön</button>\r\n                                            <button type=\"submit\" style={{ minWidth: '150px' }} className=\"btn btn-primary mr-2\">Güncelle</button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    Stations: state.Stations,\r\n    Departments: state.Departments\r\n})\r\n\r\nconst mapDispatchToProps = { UpdateDepartment, GetAllStations, GetSelectedDepartment }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Edit))"],"sourceRoot":""}